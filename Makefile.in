HASKELL_BUILD_DIR := dist/build

all: cabal

machine :=$(shell uname -m)

# TODO: remove this once we change to Java instead of MEX
thrift_inc =/usr/local/include/thrift

thrift_build = src/thrift


ifeq (@CUDA_ENABLED@, true)

# Build haskell via 'make' to allow parallel build using the -j flag. This is
# passed on to the recursive make call. Cabal doesn't support building specific
# flags. Selecting targets is done via ./Setup.lhs configure.
cabal: src/Simulation/CUDA/KernelFFI.hsc $(thrift_build)/gen-hs
	@echo "Using configuration from previous run of ./Setup.lhs configure"
	@./Setup.lhs build


CUDA_INSTALL_PATH = @CUDA_PATH@
include cuda.mk

# TODO: use better names in cuda.mk, or hide them
CUDA_LIB := $(TARGET)

# Force cabal/ghc to relink if the kernel library changes
src/Simulation/CUDA/KernelFFI.hsc: $(CUDA_LIB)
	@touch $@

else

cabal: $(thrift_build)/gen-hs
	@echo "Using configuration from previous run of ./Setup.lhs configure"
	@./Setup.lhs build

endif

client: matlab

autogen := dist/build/autogen


matlab_src = src/ExternalClient/matlab
matlab_build = dist/build/matlab
matlab_m_files := $(basename $(basename $(notdir $(wildcard $(matlab_src)/*.m.m4))))

# Additional Matlab files, for use in reference implementation.
# (No preprocessing required.)
matlab_ref_utils := $(addprefix $(matlab_src)/util/,sparsify.m mergeDuplicates.m)

.PHONY: matlab
matlab: matlab-mex matlab-reference matlab-java

matlab-mex: \
		$(matlab_build)/mex/nemo_mex.mexa64 \
		$(patsubst %,$(matlab_build)/mex/%.m,$(matlab_m_files))

matlab-java: \
		$(matlab_build)/java/nemo.jar \
		$(patsubst %,$(matlab_build)/java/%.m,$(matlab_m_files))

$(matlab_build)/java/nemo.jar: antbuild.xml $(thrift_build)/gen-java
	ant -f antbuild.xml

matlab-reference: $(patsubst %,$(matlab_build)/reference/%.m,$(matlab_m_files)) $(matlab_ref_utils)
	mkdir -p $(matlab_build)
	cp --target-directory $(matlab_build)/reference $(matlab_ref_utils)

# Generate LUT for Matlab API function dispatch
# (m4-macros for m-file or c++ function array)
.PRECIOUS: $(autogen)/mex_fn_lut.hpp
$(autogen)/mex_fn_lut.%: $(matlab_src)/gen_fn.py $(matlab_src)/*.m.m4
	mkdir -p $(dir $@)
	$< --$* $(matlab_m_files) > $@


# Generate Matlab files from source, documentation, and function LUT
# TODO: combine these two
$(matlab_build)/mex/%.m: $(autogen)/mex_fn_lut.m4 $(matlab_src)/%.m.m4 $(matlab_src)/%.help.m
	$(matlab_src)/m-help $(word 3, $^) > $@
	m4 $(wordlist 1, 2, $^) >> $@


# Generate Matlab reference source files from source and documentation
$(matlab_build)/reference/%.m: $(matlab_src)/%.reference.m $(matlab_src)/%.help.m
	mkdir -p $(dir $@)
	$(matlab_src)/m-help $(word 2, $^) > $@
	cat $< >> $@


# Generate Matlab reference source files from source and documentation
$(matlab_build)/java/%.m: $(matlab_src)/%.java.m $(matlab_src)/%.help.m
	mkdir -p $(dir $@)
	$(matlab_src)/m-help $(word 2, $^) > $@
	cat $< >> $@


# TODO: detect the default extension for matlab-mex
# TODO: windows build
$(matlab_build)/mex/%.mexa64: $(matlab_src)/%.cpp $(thrift_build)/gen-cpp $(autogen)/mex_fn_lut.hpp
	mkdir -p $(dir $@)
	matlab-mex -I$(thrift_inc) -I$(thrift_build)/gen-cpp -I$(autogen) -lthrift \
		-o $(matlab_build)/mex/$* \
		$< $(addprefix $(thrift_build)/gen-cpp/,NemoBackend.cpp nemo_types.cpp)


ifeq (@HAVE_THRIFT_COMPILER@, true)

.PRECIOUS: $(thrift_build)/gen-%
$(thrift_build)/gen-%: src/thrift/nemo.thrift
	@THRIFT@ --gen $* -o $(thrift_build) $<
	touch $@

else

$(thrift_build)/gen-%: src/thrift/nemo.thrift
	$(warning "Auto-generated thrift files out-of-date, but no thrift compiler available")

endif



#
# Distribution
#

dist_dir := dist/build/nemo-$(machine)-@PACKAGE_VERSION@
doc_build := dist/build/manual

.PHONY: dist
dist: $(dist_dir).zip


# TODO: get architecture from system
# TODO: use proper dependencies here
$(dist_dir).zip: $(doc_build)/manual.pdf client cabal
	mkdir -p $(basename $@)
	cp --target-directory $(dist_dir) -r $< dist/build/nemo/nemo dist/build/matlab
	strip $(dist_dir)/nemo
	# include shared thrift libraries as well.
	(cd dist/build; zip -r $(notdir $@) $(basename $(notdir $@)); cd ../..)


#
# Documentation
#

.PHONY: doc
doc: doc/manual/manual.pdf

doc_src := doc/manual

doc/manual/manual.pdf: $(doc_src)/matlab.tex 
	(cd doc/manual; make; cd ../..)

.PHONY: doc-clean
doc-clean:
	(cd doc/manual; make clean; cd ../..)

$(doc_src)/matlab.tex: $(matlab_src)/*.help.m
	cat $^ | util/matlab-manual-api.sh > $@

$(doc_build)/manual.pdf: $(doc_src)/manual.pdf
	cp --target-directory $(dir $@) $<


.PHONY: install
install:
	./Setup.lhs install


.PHONY: tags
tags:
	find src -iname '*.hs' | xargs hasktags --ctags
	find testsuite -iname '*.hs' | xargs hasktags --ctags --append


.PHONY: count
count: cuda_count
	@echo "Lines of haskell source code: "
	@find src -iname '*.hs' -or -iname '*.hsc' | xargs cat | grep -v -e '^[[:space:]]*$$' -e '^[[:space:]]*--' -e '^ - ' -e '^{- ' | wc -l
	@echo "Lines of test code: "
	@find testsuite/Test -iname '*.hs' -or -iname '*.hsc' | xargs cat | grep -v -e '^[[:space:]]*$$' -e '^[[:space:]]*--' -e '^ - ' -e '^{- ' | wc -l


# The CUDA lib is built in cabals build tree, so it will be cleaned out along
# with all the haskell files.
.PHONY: clean
clean:
	./Setup.lhs clean
