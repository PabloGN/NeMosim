-----------------------------------------------------------------
-- Autogenerated by Thrift                                     --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module NemoFrontend where
import Thrift
import Data.Typeable ( Typeable )
import Control.Exception
import qualified Data.Map as Map
import qualified Data.Set as Set
import Data.Int
import Nemo_Types
import qualified NemoFrontend_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data SetBackend_args = SetBackend_args{f_SetBackend_args_host :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_SetBackend_args oprot rec = do
  writeStructBegin oprot "SetBackend_args"
  case f_SetBackend_args_host rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("host",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_SetBackend_args_fields iprot rec = do
  (_,_t40,_id41) <- readFieldBegin iprot
  if _t40 == T_STOP then return rec else
    case _id41 of 
      1 -> if _t40 == T_STRING then do
        s <- readString iprot
        read_SetBackend_args_fields iprot rec{f_SetBackend_args_host=Just s}
        else do
          skip iprot _t40
          read_SetBackend_args_fields iprot rec
      _ -> do
        skip iprot _t40
        readFieldEnd iprot
        read_SetBackend_args_fields iprot rec
read_SetBackend_args iprot = do
  readStructBegin iprot
  rec <- read_SetBackend_args_fields iprot (SetBackend_args{f_SetBackend_args_host=Nothing})
  readStructEnd iprot
  return rec
data SetBackend_result = SetBackend_result deriving (Show,Eq,Ord,Typeable)
write_SetBackend_result oprot rec = do
  writeStructBegin oprot "SetBackend_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_SetBackend_result_fields iprot rec = do
  (_,_t45,_id46) <- readFieldBegin iprot
  if _t45 == T_STOP then return rec else
    case _id46 of 
      _ -> do
        skip iprot _t45
        readFieldEnd iprot
        read_SetBackend_result_fields iprot rec
read_SetBackend_result iprot = do
  readStructBegin iprot
  rec <- read_SetBackend_result_fields iprot (SetBackend_result{})
  readStructEnd iprot
  return rec
data EnableStdp_args = EnableStdp_args{f_EnableStdp_args_prefire :: Maybe [Double],f_EnableStdp_args_postfire :: Maybe [Double],f_EnableStdp_args_maxWeight :: Maybe Double,f_EnableStdp_args_minWeight :: Maybe Double} deriving (Show,Eq,Ord,Typeable)
write_EnableStdp_args oprot rec = do
  writeStructBegin oprot "EnableStdp_args"
  case f_EnableStdp_args_prefire rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("prefire",T_LIST,1)
    (let {f [] = return (); f (_viter49:t) = do {writeDouble oprot _viter49;f t}} in do {writeListBegin oprot (T_DOUBLE,length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_EnableStdp_args_postfire rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("postfire",T_LIST,2)
    (let {f [] = return (); f (_viter50:t) = do {writeDouble oprot _viter50;f t}} in do {writeListBegin oprot (T_DOUBLE,length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_EnableStdp_args_maxWeight rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("maxWeight",T_DOUBLE,3)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_EnableStdp_args_minWeight rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("minWeight",T_DOUBLE,4)
    writeDouble oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_EnableStdp_args_fields iprot rec = do
  (_,_t52,_id53) <- readFieldBegin iprot
  if _t52 == T_STOP then return rec else
    case _id53 of 
      1 -> if _t52 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- readDouble iprot;r <- f (n-1); return $ v:r}} in do {(_etype57,_size54) <- readListBegin iprot; f _size54})
        read_EnableStdp_args_fields iprot rec{f_EnableStdp_args_prefire=Just s}
        else do
          skip iprot _t52
          read_EnableStdp_args_fields iprot rec
      2 -> if _t52 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- readDouble iprot;r <- f (n-1); return $ v:r}} in do {(_etype62,_size59) <- readListBegin iprot; f _size59})
        read_EnableStdp_args_fields iprot rec{f_EnableStdp_args_postfire=Just s}
        else do
          skip iprot _t52
          read_EnableStdp_args_fields iprot rec
      3 -> if _t52 == T_DOUBLE then do
        s <- readDouble iprot
        read_EnableStdp_args_fields iprot rec{f_EnableStdp_args_maxWeight=Just s}
        else do
          skip iprot _t52
          read_EnableStdp_args_fields iprot rec
      4 -> if _t52 == T_DOUBLE then do
        s <- readDouble iprot
        read_EnableStdp_args_fields iprot rec{f_EnableStdp_args_minWeight=Just s}
        else do
          skip iprot _t52
          read_EnableStdp_args_fields iprot rec
      _ -> do
        skip iprot _t52
        readFieldEnd iprot
        read_EnableStdp_args_fields iprot rec
read_EnableStdp_args iprot = do
  readStructBegin iprot
  rec <- read_EnableStdp_args_fields iprot (EnableStdp_args{f_EnableStdp_args_prefire=Nothing,f_EnableStdp_args_postfire=Nothing,f_EnableStdp_args_maxWeight=Nothing,f_EnableStdp_args_minWeight=Nothing})
  readStructEnd iprot
  return rec
data EnableStdp_result = EnableStdp_result deriving (Show,Eq,Ord,Typeable)
write_EnableStdp_result oprot rec = do
  writeStructBegin oprot "EnableStdp_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_EnableStdp_result_fields iprot rec = do
  (_,_t67,_id68) <- readFieldBegin iprot
  if _t67 == T_STOP then return rec else
    case _id68 of 
      _ -> do
        skip iprot _t67
        readFieldEnd iprot
        read_EnableStdp_result_fields iprot rec
read_EnableStdp_result iprot = do
  readStructBegin iprot
  rec <- read_EnableStdp_result_fields iprot (EnableStdp_result{})
  readStructEnd iprot
  return rec
data EnablePipelining_args = EnablePipelining_args deriving (Show,Eq,Ord,Typeable)
write_EnablePipelining_args oprot rec = do
  writeStructBegin oprot "EnablePipelining_args"
  writeFieldStop oprot
  writeStructEnd oprot
read_EnablePipelining_args_fields iprot rec = do
  (_,_t72,_id73) <- readFieldBegin iprot
  if _t72 == T_STOP then return rec else
    case _id73 of 
      _ -> do
        skip iprot _t72
        readFieldEnd iprot
        read_EnablePipelining_args_fields iprot rec
read_EnablePipelining_args iprot = do
  readStructBegin iprot
  rec <- read_EnablePipelining_args_fields iprot (EnablePipelining_args{})
  readStructEnd iprot
  return rec
data EnablePipelining_result = EnablePipelining_result deriving (Show,Eq,Ord,Typeable)
write_EnablePipelining_result oprot rec = do
  writeStructBegin oprot "EnablePipelining_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_EnablePipelining_result_fields iprot rec = do
  (_,_t77,_id78) <- readFieldBegin iprot
  if _t77 == T_STOP then return rec else
    case _id78 of 
      _ -> do
        skip iprot _t77
        readFieldEnd iprot
        read_EnablePipelining_result_fields iprot rec
read_EnablePipelining_result iprot = do
  readStructBegin iprot
  rec <- read_EnablePipelining_result_fields iprot (EnablePipelining_result{})
  readStructEnd iprot
  return rec
data PipelineLength_args = PipelineLength_args deriving (Show,Eq,Ord,Typeable)
write_PipelineLength_args oprot rec = do
  writeStructBegin oprot "PipelineLength_args"
  writeFieldStop oprot
  writeStructEnd oprot
read_PipelineLength_args_fields iprot rec = do
  (_,_t82,_id83) <- readFieldBegin iprot
  if _t82 == T_STOP then return rec else
    case _id83 of 
      _ -> do
        skip iprot _t82
        readFieldEnd iprot
        read_PipelineLength_args_fields iprot rec
read_PipelineLength_args iprot = do
  readStructBegin iprot
  rec <- read_PipelineLength_args_fields iprot (PipelineLength_args{})
  readStructEnd iprot
  return rec
data PipelineLength_result = PipelineLength_result{f_PipelineLength_result_success :: Maybe PipelineLength} deriving (Show,Eq,Ord,Typeable)
write_PipelineLength_result oprot rec = do
  writeStructBegin oprot "PipelineLength_result"
  case f_PipelineLength_result_success rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_PipelineLength oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_PipelineLength_result_fields iprot rec = do
  (_,_t87,_id88) <- readFieldBegin iprot
  if _t87 == T_STOP then return rec else
    case _id88 of 
      0 -> if _t87 == T_STRUCT then do
        s <- (read_PipelineLength iprot)
        read_PipelineLength_result_fields iprot rec{f_PipelineLength_result_success=Just s}
        else do
          skip iprot _t87
          read_PipelineLength_result_fields iprot rec
      _ -> do
        skip iprot _t87
        readFieldEnd iprot
        read_PipelineLength_result_fields iprot rec
read_PipelineLength_result iprot = do
  readStructBegin iprot
  rec <- read_PipelineLength_result_fields iprot (PipelineLength_result{f_PipelineLength_result_success=Nothing})
  readStructEnd iprot
  return rec
data DisableStdp_args = DisableStdp_args deriving (Show,Eq,Ord,Typeable)
write_DisableStdp_args oprot rec = do
  writeStructBegin oprot "DisableStdp_args"
  writeFieldStop oprot
  writeStructEnd oprot
read_DisableStdp_args_fields iprot rec = do
  (_,_t92,_id93) <- readFieldBegin iprot
  if _t92 == T_STOP then return rec else
    case _id93 of 
      _ -> do
        skip iprot _t92
        readFieldEnd iprot
        read_DisableStdp_args_fields iprot rec
read_DisableStdp_args iprot = do
  readStructBegin iprot
  rec <- read_DisableStdp_args_fields iprot (DisableStdp_args{})
  readStructEnd iprot
  return rec
data DisableStdp_result = DisableStdp_result deriving (Show,Eq,Ord,Typeable)
write_DisableStdp_result oprot rec = do
  writeStructBegin oprot "DisableStdp_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_DisableStdp_result_fields iprot rec = do
  (_,_t97,_id98) <- readFieldBegin iprot
  if _t97 == T_STOP then return rec else
    case _id98 of 
      _ -> do
        skip iprot _t97
        readFieldEnd iprot
        read_DisableStdp_result_fields iprot rec
read_DisableStdp_result iprot = do
  readStructBegin iprot
  rec <- read_DisableStdp_result_fields iprot (DisableStdp_result{})
  readStructEnd iprot
  return rec
data AddNeuron_args = AddNeuron_args{f_AddNeuron_args_neuron :: Maybe IzhNeuron} deriving (Show,Eq,Ord,Typeable)
write_AddNeuron_args oprot rec = do
  writeStructBegin oprot "AddNeuron_args"
  case f_AddNeuron_args_neuron rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("neuron",T_STRUCT,1)
    write_IzhNeuron oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_AddNeuron_args_fields iprot rec = do
  (_,_t102,_id103) <- readFieldBegin iprot
  if _t102 == T_STOP then return rec else
    case _id103 of 
      1 -> if _t102 == T_STRUCT then do
        s <- (read_IzhNeuron iprot)
        read_AddNeuron_args_fields iprot rec{f_AddNeuron_args_neuron=Just s}
        else do
          skip iprot _t102
          read_AddNeuron_args_fields iprot rec
      _ -> do
        skip iprot _t102
        readFieldEnd iprot
        read_AddNeuron_args_fields iprot rec
read_AddNeuron_args iprot = do
  readStructBegin iprot
  rec <- read_AddNeuron_args_fields iprot (AddNeuron_args{f_AddNeuron_args_neuron=Nothing})
  readStructEnd iprot
  return rec
data AddNeuron_result = AddNeuron_result{f_AddNeuron_result_err :: Maybe ConstructionError} deriving (Show,Eq,Ord,Typeable)
write_AddNeuron_result oprot rec = do
  writeStructBegin oprot "AddNeuron_result"
  case f_AddNeuron_result_err rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("err",T_STRUCT,1)
    write_ConstructionError oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_AddNeuron_result_fields iprot rec = do
  (_,_t107,_id108) <- readFieldBegin iprot
  if _t107 == T_STOP then return rec else
    case _id108 of 
      1 -> if _t107 == T_STRUCT then do
        s <- (read_ConstructionError iprot)
        read_AddNeuron_result_fields iprot rec{f_AddNeuron_result_err=Just s}
        else do
          skip iprot _t107
          read_AddNeuron_result_fields iprot rec
      _ -> do
        skip iprot _t107
        readFieldEnd iprot
        read_AddNeuron_result_fields iprot rec
read_AddNeuron_result iprot = do
  readStructBegin iprot
  rec <- read_AddNeuron_result_fields iprot (AddNeuron_result{f_AddNeuron_result_err=Nothing})
  readStructEnd iprot
  return rec
data StartSimulation_args = StartSimulation_args deriving (Show,Eq,Ord,Typeable)
write_StartSimulation_args oprot rec = do
  writeStructBegin oprot "StartSimulation_args"
  writeFieldStop oprot
  writeStructEnd oprot
read_StartSimulation_args_fields iprot rec = do
  (_,_t112,_id113) <- readFieldBegin iprot
  if _t112 == T_STOP then return rec else
    case _id113 of 
      _ -> do
        skip iprot _t112
        readFieldEnd iprot
        read_StartSimulation_args_fields iprot rec
read_StartSimulation_args iprot = do
  readStructBegin iprot
  rec <- read_StartSimulation_args_fields iprot (StartSimulation_args{})
  readStructEnd iprot
  return rec
data StartSimulation_result = StartSimulation_result{f_StartSimulation_result_err :: Maybe ConstructionError} deriving (Show,Eq,Ord,Typeable)
write_StartSimulation_result oprot rec = do
  writeStructBegin oprot "StartSimulation_result"
  case f_StartSimulation_result_err rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("err",T_STRUCT,1)
    write_ConstructionError oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_StartSimulation_result_fields iprot rec = do
  (_,_t117,_id118) <- readFieldBegin iprot
  if _t117 == T_STOP then return rec else
    case _id118 of 
      1 -> if _t117 == T_STRUCT then do
        s <- (read_ConstructionError iprot)
        read_StartSimulation_result_fields iprot rec{f_StartSimulation_result_err=Just s}
        else do
          skip iprot _t117
          read_StartSimulation_result_fields iprot rec
      _ -> do
        skip iprot _t117
        readFieldEnd iprot
        read_StartSimulation_result_fields iprot rec
read_StartSimulation_result iprot = do
  readStructBegin iprot
  rec <- read_StartSimulation_result_fields iprot (StartSimulation_result{f_StartSimulation_result_err=Nothing})
  readStructEnd iprot
  return rec
data Run_args = Run_args{f_Run_args_stim :: Maybe [Stimulus]} deriving (Show,Eq,Ord,Typeable)
write_Run_args oprot rec = do
  writeStructBegin oprot "Run_args"
  case f_Run_args_stim rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("stim",T_LIST,1)
    (let {f [] = return (); f (_viter121:t) = do {write_Stimulus oprot _viter121;f t}} in do {writeListBegin oprot (T_STRUCT,length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Run_args_fields iprot rec = do
  (_,_t123,_id124) <- readFieldBegin iprot
  if _t123 == T_STOP then return rec else
    case _id124 of 
      1 -> if _t123 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_Stimulus iprot);r <- f (n-1); return $ v:r}} in do {(_etype128,_size125) <- readListBegin iprot; f _size125})
        read_Run_args_fields iprot rec{f_Run_args_stim=Just s}
        else do
          skip iprot _t123
          read_Run_args_fields iprot rec
      _ -> do
        skip iprot _t123
        readFieldEnd iprot
        read_Run_args_fields iprot rec
read_Run_args iprot = do
  readStructBegin iprot
  rec <- read_Run_args_fields iprot (Run_args{f_Run_args_stim=Nothing})
  readStructEnd iprot
  return rec
data Run_result = Run_result{f_Run_result_success :: Maybe [[Int]],f_Run_result_err :: Maybe ConstructionError} deriving (Show,Eq,Ord,Typeable)
write_Run_result oprot rec = do
  writeStructBegin oprot "Run_result"
  case f_Run_result_success rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter132:t) = do {(let {f [] = return (); f (_viter133:t) = do {writeI32 oprot _viter133;f t}} in do {writeListBegin oprot (T_I32,length _viter132); f _viter132;writeListEnd oprot});f t}} in do {writeListBegin oprot (T_LIST,length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_Run_result_err rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("err",T_STRUCT,1)
    write_ConstructionError oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Run_result_fields iprot rec = do
  (_,_t135,_id136) <- readFieldBegin iprot
  if _t135 == T_STOP then return rec else
    case _id136 of 
      0 -> if _t135 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (let {f 0 = return []; f n = do {v <- readI32 iprot;r <- f (n-1); return $ v:r}} in do {(_etype145,_size142) <- readListBegin iprot; f _size142});r <- f (n-1); return $ v:r}} in do {(_etype140,_size137) <- readListBegin iprot; f _size137})
        read_Run_result_fields iprot rec{f_Run_result_success=Just s}
        else do
          skip iprot _t135
          read_Run_result_fields iprot rec
      1 -> if _t135 == T_STRUCT then do
        s <- (read_ConstructionError iprot)
        read_Run_result_fields iprot rec{f_Run_result_err=Just s}
        else do
          skip iprot _t135
          read_Run_result_fields iprot rec
      _ -> do
        skip iprot _t135
        readFieldEnd iprot
        read_Run_result_fields iprot rec
read_Run_result iprot = do
  readStructBegin iprot
  rec <- read_Run_result_fields iprot (Run_result{f_Run_result_success=Nothing,f_Run_result_err=Nothing})
  readStructEnd iprot
  return rec
data ApplyStdp_args = ApplyStdp_args{f_ApplyStdp_args_reward :: Maybe Double} deriving (Show,Eq,Ord,Typeable)
write_ApplyStdp_args oprot rec = do
  writeStructBegin oprot "ApplyStdp_args"
  case f_ApplyStdp_args_reward rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("reward",T_DOUBLE,1)
    writeDouble oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ApplyStdp_args_fields iprot rec = do
  (_,_t150,_id151) <- readFieldBegin iprot
  if _t150 == T_STOP then return rec else
    case _id151 of 
      1 -> if _t150 == T_DOUBLE then do
        s <- readDouble iprot
        read_ApplyStdp_args_fields iprot rec{f_ApplyStdp_args_reward=Just s}
        else do
          skip iprot _t150
          read_ApplyStdp_args_fields iprot rec
      _ -> do
        skip iprot _t150
        readFieldEnd iprot
        read_ApplyStdp_args_fields iprot rec
read_ApplyStdp_args iprot = do
  readStructBegin iprot
  rec <- read_ApplyStdp_args_fields iprot (ApplyStdp_args{f_ApplyStdp_args_reward=Nothing})
  readStructEnd iprot
  return rec
data ApplyStdp_result = ApplyStdp_result{f_ApplyStdp_result_err :: Maybe ConstructionError} deriving (Show,Eq,Ord,Typeable)
write_ApplyStdp_result oprot rec = do
  writeStructBegin oprot "ApplyStdp_result"
  case f_ApplyStdp_result_err rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("err",T_STRUCT,1)
    write_ConstructionError oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ApplyStdp_result_fields iprot rec = do
  (_,_t155,_id156) <- readFieldBegin iprot
  if _t155 == T_STOP then return rec else
    case _id156 of 
      1 -> if _t155 == T_STRUCT then do
        s <- (read_ConstructionError iprot)
        read_ApplyStdp_result_fields iprot rec{f_ApplyStdp_result_err=Just s}
        else do
          skip iprot _t155
          read_ApplyStdp_result_fields iprot rec
      _ -> do
        skip iprot _t155
        readFieldEnd iprot
        read_ApplyStdp_result_fields iprot rec
read_ApplyStdp_result iprot = do
  readStructBegin iprot
  rec <- read_ApplyStdp_result_fields iprot (ApplyStdp_result{f_ApplyStdp_result_err=Nothing})
  readStructEnd iprot
  return rec
data GetConnectivity_args = GetConnectivity_args deriving (Show,Eq,Ord,Typeable)
write_GetConnectivity_args oprot rec = do
  writeStructBegin oprot "GetConnectivity_args"
  writeFieldStop oprot
  writeStructEnd oprot
read_GetConnectivity_args_fields iprot rec = do
  (_,_t160,_id161) <- readFieldBegin iprot
  if _t160 == T_STOP then return rec else
    case _id161 of 
      _ -> do
        skip iprot _t160
        readFieldEnd iprot
        read_GetConnectivity_args_fields iprot rec
read_GetConnectivity_args iprot = do
  readStructBegin iprot
  rec <- read_GetConnectivity_args_fields iprot (GetConnectivity_args{})
  readStructEnd iprot
  return rec
data GetConnectivity_result = GetConnectivity_result{f_GetConnectivity_result_success :: Maybe (Map.Map Int [Synapse])} deriving (Show,Eq,Ord,Typeable)
write_GetConnectivity_result oprot rec = do
  writeStructBegin oprot "GetConnectivity_result"
  case f_GetConnectivity_result_success rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_MAP,0)
    (let {f [] = return (); f ((_kiter164,_viter165):t) = do {do {writeI32 oprot _kiter164;(let {f [] = return (); f (_viter166:t) = do {write_Synapse oprot _viter166;f t}} in do {writeListBegin oprot (T_STRUCT,length _viter165); f _viter165;writeListEnd oprot})};f t}} in do {writeMapBegin oprot (T_I32,T_LIST,Map.size _v); f (Map.toList _v);writeMapEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetConnectivity_result_fields iprot rec = do
  (_,_t168,_id169) <- readFieldBegin iprot
  if _t168 == T_STOP then return rec else
    case _id169 of 
      0 -> if _t168 == T_MAP then do
        s <- (let {f 0 = return []; f n = do {k <- readI32 iprot; v <- (let {f 0 = return []; f n = do {v <- (read_Synapse iprot);r <- f (n-1); return $ v:r}} in do {(_etype178,_size175) <- readListBegin iprot; f _size175});r <- f (n-1); return $ (k,v):r}} in do {(_ktype171,_vtype172,_size170) <- readMapBegin iprot; l <- f _size170; return $ Map.fromList l})
        read_GetConnectivity_result_fields iprot rec{f_GetConnectivity_result_success=Just s}
        else do
          skip iprot _t168
          read_GetConnectivity_result_fields iprot rec
      _ -> do
        skip iprot _t168
        readFieldEnd iprot
        read_GetConnectivity_result_fields iprot rec
read_GetConnectivity_result iprot = do
  readStructBegin iprot
  rec <- read_GetConnectivity_result_fields iprot (GetConnectivity_result{f_GetConnectivity_result_success=Nothing})
  readStructEnd iprot
  return rec
data StopSimulation_args = StopSimulation_args deriving (Show,Eq,Ord,Typeable)
write_StopSimulation_args oprot rec = do
  writeStructBegin oprot "StopSimulation_args"
  writeFieldStop oprot
  writeStructEnd oprot
read_StopSimulation_args_fields iprot rec = do
  (_,_t183,_id184) <- readFieldBegin iprot
  if _t183 == T_STOP then return rec else
    case _id184 of 
      _ -> do
        skip iprot _t183
        readFieldEnd iprot
        read_StopSimulation_args_fields iprot rec
read_StopSimulation_args iprot = do
  readStructBegin iprot
  rec <- read_StopSimulation_args_fields iprot (StopSimulation_args{})
  readStructEnd iprot
  return rec
data StopSimulation_result = StopSimulation_result deriving (Show,Eq,Ord,Typeable)
write_StopSimulation_result oprot rec = do
  writeStructBegin oprot "StopSimulation_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_StopSimulation_result_fields iprot rec = do
  (_,_t188,_id189) <- readFieldBegin iprot
  if _t188 == T_STOP then return rec else
    case _id189 of 
      _ -> do
        skip iprot _t188
        readFieldEnd iprot
        read_StopSimulation_result_fields iprot rec
read_StopSimulation_result iprot = do
  readStructBegin iprot
  rec <- read_StopSimulation_result_fields iprot (StopSimulation_result{})
  readStructEnd iprot
  return rec
data Reset_args = Reset_args deriving (Show,Eq,Ord,Typeable)
write_Reset_args oprot rec = do
  writeStructBegin oprot "Reset_args"
  writeFieldStop oprot
  writeStructEnd oprot
read_Reset_args_fields iprot rec = do
  (_,_t193,_id194) <- readFieldBegin iprot
  if _t193 == T_STOP then return rec else
    case _id194 of 
      _ -> do
        skip iprot _t193
        readFieldEnd iprot
        read_Reset_args_fields iprot rec
read_Reset_args iprot = do
  readStructBegin iprot
  rec <- read_Reset_args_fields iprot (Reset_args{})
  readStructEnd iprot
  return rec
data Reset_result = Reset_result deriving (Show,Eq,Ord,Typeable)
write_Reset_result oprot rec = do
  writeStructBegin oprot "Reset_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_Reset_result_fields iprot rec = do
  (_,_t198,_id199) <- readFieldBegin iprot
  if _t198 == T_STOP then return rec else
    case _id199 of 
      _ -> do
        skip iprot _t198
        readFieldEnd iprot
        read_Reset_result_fields iprot rec
read_Reset_result iprot = do
  readStructBegin iprot
  rec <- read_Reset_result_fields iprot (Reset_result{})
  readStructEnd iprot
  return rec
data Terminate_args = Terminate_args deriving (Show,Eq,Ord,Typeable)
write_Terminate_args oprot rec = do
  writeStructBegin oprot "Terminate_args"
  writeFieldStop oprot
  writeStructEnd oprot
read_Terminate_args_fields iprot rec = do
  (_,_t203,_id204) <- readFieldBegin iprot
  if _t203 == T_STOP then return rec else
    case _id204 of 
      _ -> do
        skip iprot _t203
        readFieldEnd iprot
        read_Terminate_args_fields iprot rec
read_Terminate_args iprot = do
  readStructBegin iprot
  rec <- read_Terminate_args_fields iprot (Terminate_args{})
  readStructEnd iprot
  return rec
data Terminate_result = Terminate_result deriving (Show,Eq,Ord,Typeable)
write_Terminate_result oprot rec = do
  writeStructBegin oprot "Terminate_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_Terminate_result_fields iprot rec = do
  (_,_t208,_id209) <- readFieldBegin iprot
  if _t208 == T_STOP then return rec else
    case _id209 of 
      _ -> do
        skip iprot _t208
        readFieldEnd iprot
        read_Terminate_result_fields iprot rec
read_Terminate_result iprot = do
  readStructBegin iprot
  rec <- read_Terminate_result_fields iprot (Terminate_result{})
  readStructEnd iprot
  return rec
process_setBackend (seqid, iprot, oprot, handler) = do
  args <- read_SetBackend_args iprot
  readMessageEnd iprot
  rs <- return (SetBackend_result)
  res <- (do
    Iface.setBackend handler (f_SetBackend_args_host args)
    return rs)
  writeMessageBegin oprot ("setBackend", M_REPLY, seqid);
  write_SetBackend_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_enableStdp (seqid, iprot, oprot, handler) = do
  args <- read_EnableStdp_args iprot
  readMessageEnd iprot
  rs <- return (EnableStdp_result)
  res <- (do
    Iface.enableStdp handler (f_EnableStdp_args_prefire args) (f_EnableStdp_args_postfire args) (f_EnableStdp_args_maxWeight args) (f_EnableStdp_args_minWeight args)
    return rs)
  writeMessageBegin oprot ("enableStdp", M_REPLY, seqid);
  write_EnableStdp_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_enablePipelining (seqid, iprot, oprot, handler) = do
  args <- read_EnablePipelining_args iprot
  readMessageEnd iprot
  rs <- return (EnablePipelining_result)
  res <- (do
    Iface.enablePipelining handler
    return rs)
  writeMessageBegin oprot ("enablePipelining", M_REPLY, seqid);
  write_EnablePipelining_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_pipelineLength (seqid, iprot, oprot, handler) = do
  args <- read_PipelineLength_args iprot
  readMessageEnd iprot
  rs <- return (PipelineLength_result Nothing)
  res <- (do
    res <- Iface.pipelineLength handler
    return rs{f_PipelineLength_result_success= Just res})
  writeMessageBegin oprot ("pipelineLength", M_REPLY, seqid);
  write_PipelineLength_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_disableStdp (seqid, iprot, oprot, handler) = do
  args <- read_DisableStdp_args iprot
  readMessageEnd iprot
  rs <- return (DisableStdp_result)
  res <- (do
    Iface.disableStdp handler
    return rs)
  writeMessageBegin oprot ("disableStdp", M_REPLY, seqid);
  write_DisableStdp_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_addNeuron (seqid, iprot, oprot, handler) = do
  args <- read_AddNeuron_args iprot
  readMessageEnd iprot
  rs <- return (AddNeuron_result Nothing)
  res <- (Control.Exception.catch
    (do
      Iface.addNeuron handler (f_AddNeuron_args_neuron args)
      return rs)
    (\e  -> 
      return rs{f_AddNeuron_result_err =Just e}))
  writeMessageBegin oprot ("addNeuron", M_REPLY, seqid);
  write_AddNeuron_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_startSimulation (seqid, iprot, oprot, handler) = do
  args <- read_StartSimulation_args iprot
  readMessageEnd iprot
  rs <- return (StartSimulation_result Nothing)
  res <- (Control.Exception.catch
    (do
      Iface.startSimulation handler
      return rs)
    (\e  -> 
      return rs{f_StartSimulation_result_err =Just e}))
  writeMessageBegin oprot ("startSimulation", M_REPLY, seqid);
  write_StartSimulation_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_run (seqid, iprot, oprot, handler) = do
  args <- read_Run_args iprot
  readMessageEnd iprot
  rs <- return (Run_result Nothing Nothing)
  res <- (Control.Exception.catch
    (do
      res <- Iface.run handler (f_Run_args_stim args)
      return rs{f_Run_result_success= Just res})
    (\e  -> 
      return rs{f_Run_result_err =Just e}))
  writeMessageBegin oprot ("run", M_REPLY, seqid);
  write_Run_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_applyStdp (seqid, iprot, oprot, handler) = do
  args <- read_ApplyStdp_args iprot
  readMessageEnd iprot
  rs <- return (ApplyStdp_result Nothing)
  res <- (Control.Exception.catch
    (do
      Iface.applyStdp handler (f_ApplyStdp_args_reward args)
      return rs)
    (\e  -> 
      return rs{f_ApplyStdp_result_err =Just e}))
  writeMessageBegin oprot ("applyStdp", M_REPLY, seqid);
  write_ApplyStdp_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getConnectivity (seqid, iprot, oprot, handler) = do
  args <- read_GetConnectivity_args iprot
  readMessageEnd iprot
  rs <- return (GetConnectivity_result Nothing)
  res <- (do
    res <- Iface.getConnectivity handler
    return rs{f_GetConnectivity_result_success= Just res})
  writeMessageBegin oprot ("getConnectivity", M_REPLY, seqid);
  write_GetConnectivity_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_stopSimulation (seqid, iprot, oprot, handler) = do
  args <- read_StopSimulation_args iprot
  readMessageEnd iprot
  rs <- return (StopSimulation_result)
  res <- (do
    Iface.stopSimulation handler
    return rs)
  writeMessageBegin oprot ("stopSimulation", M_REPLY, seqid);
  write_StopSimulation_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_reset (seqid, iprot, oprot, handler) = do
  args <- read_Reset_args iprot
  readMessageEnd iprot
  rs <- return (Reset_result)
  res <- (do
    Iface.reset handler
    return rs)
  writeMessageBegin oprot ("reset", M_REPLY, seqid);
  write_Reset_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_terminate (seqid, iprot, oprot, handler) = do
  args <- read_Terminate_args iprot
  readMessageEnd iprot
  res <- (do
    Iface.terminate handler)
  return ()
proc handler (iprot,oprot) (name,typ,seqid) = case name of
  "setBackend" -> process_setBackend (seqid,iprot,oprot,handler)
  "enableStdp" -> process_enableStdp (seqid,iprot,oprot,handler)
  "enablePipelining" -> process_enablePipelining (seqid,iprot,oprot,handler)
  "pipelineLength" -> process_pipelineLength (seqid,iprot,oprot,handler)
  "disableStdp" -> process_disableStdp (seqid,iprot,oprot,handler)
  "addNeuron" -> process_addNeuron (seqid,iprot,oprot,handler)
  "startSimulation" -> process_startSimulation (seqid,iprot,oprot,handler)
  "run" -> process_run (seqid,iprot,oprot,handler)
  "applyStdp" -> process_applyStdp (seqid,iprot,oprot,handler)
  "getConnectivity" -> process_getConnectivity (seqid,iprot,oprot,handler)
  "stopSimulation" -> process_stopSimulation (seqid,iprot,oprot,handler)
  "reset" -> process_reset (seqid,iprot,oprot,handler)
  "terminate" -> process_terminate (seqid,iprot,oprot,handler)
  _ -> do
    skip iprot T_STRUCT
    readMessageEnd iprot
    writeMessageBegin oprot (name,M_EXCEPTION,seqid)
    writeAppExn oprot (AppExn AE_UNKNOWN_METHOD ("Unknown function " ++ name))
    writeMessageEnd oprot
    tFlush (getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- readMessageBegin iprot
  proc handler (iprot,oprot) (name,typ,seqid)
  return True
