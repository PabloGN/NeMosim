/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package nemo;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Stimulus implements TBase, java.io.Serializable, Cloneable, Comparable<Stimulus> {
  private static final TStruct STRUCT_DESC = new TStruct("Stimulus");
  private static final TField FIRING_FIELD_DESC = new TField("firing", TType.LIST, (short)1);

  public List<Integer> firing;
  public static final int FIRING = 1;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(FIRING, new FieldMetaData("firing", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I32))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Stimulus.class, metaDataMap);
  }

  public Stimulus() {
  }

  public Stimulus(
    List<Integer> firing)
  {
    this();
    this.firing = firing;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Stimulus(Stimulus other) {
    if (other.isSetFiring()) {
      List<Integer> __this__firing = new ArrayList<Integer>();
      for (Integer other_element : other.firing) {
        __this__firing.add(other_element);
      }
      this.firing = __this__firing;
    }
  }

  @Override
  public Stimulus clone() {
    return new Stimulus(this);
  }

  public List<Integer> getFiring() {
    return this.firing;
  }

  public Stimulus setFiring(List<Integer> firing) {
    this.firing = firing;
    return this;
  }

  public void unsetFiring() {
    this.firing = null;
  }

  // Returns true if field firing is set (has been asigned a value) and false otherwise
  public boolean isSetFiring() {
    return this.firing != null;
  }

  public void setFiringIsSet(boolean value) {
    if (!value) {
      this.firing = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case FIRING:
      if (value == null) {
        unsetFiring();
      } else {
        setFiring((List<Integer>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case FIRING:
      return getFiring();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case FIRING:
      return isSetFiring();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Stimulus)
      return this.equals((Stimulus)that);
    return false;
  }

  public boolean equals(Stimulus that) {
    if (that == null)
      return false;

    boolean this_present_firing = true && this.isSetFiring();
    boolean that_present_firing = true && that.isSetFiring();
    if (this_present_firing || that_present_firing) {
      if (!(this_present_firing && that_present_firing))
        return false;
      if (!this.firing.equals(that.firing))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Stimulus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Stimulus typedOther = (Stimulus)other;

    lastComparison = Boolean.valueOf(isSetFiring()).compareTo(isSetFiring());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(firing, typedOther.firing);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case FIRING:
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.firing = new ArrayList<Integer>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                int _elem6;
                _elem6 = iprot.readI32();
                this.firing.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.firing != null) {
      oprot.writeFieldBegin(FIRING_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.firing.size()));
        for (int _iter7 : this.firing)        {
          oprot.writeI32(_iter7);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Stimulus(");
    boolean first = true;

    sb.append("firing:");
    if (this.firing == null) {
      sb.append("null");
    } else {
      sb.append(this.firing);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

