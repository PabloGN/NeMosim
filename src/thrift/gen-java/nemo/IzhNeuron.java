/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package nemo;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class IzhNeuron implements TBase, java.io.Serializable, Cloneable, Comparable<IzhNeuron> {
  private static final TStruct STRUCT_DESC = new TStruct("IzhNeuron");
  private static final TField INDEX_FIELD_DESC = new TField("index", TType.I32, (short)1);
  private static final TField A_FIELD_DESC = new TField("a", TType.DOUBLE, (short)2);
  private static final TField B_FIELD_DESC = new TField("b", TType.DOUBLE, (short)3);
  private static final TField C_FIELD_DESC = new TField("c", TType.DOUBLE, (short)4);
  private static final TField D_FIELD_DESC = new TField("d", TType.DOUBLE, (short)5);
  private static final TField U_FIELD_DESC = new TField("u", TType.DOUBLE, (short)6);
  private static final TField V_FIELD_DESC = new TField("v", TType.DOUBLE, (short)7);
  private static final TField AXON_FIELD_DESC = new TField("axon", TType.LIST, (short)8);

  public int index;
  public static final int INDEX = 1;
  public double a;
  public static final int A = 2;
  public double b;
  public static final int B = 3;
  public double c;
  public static final int C = 4;
  public double d;
  public static final int D = 5;
  public double u;
  public static final int U = 6;
  public double v;
  public static final int V = 7;
  public List<Synapse> axon;
  public static final int AXON = 8;

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private static final int __A_ISSET_ID = 1;
  private static final int __B_ISSET_ID = 2;
  private static final int __C_ISSET_ID = 3;
  private static final int __D_ISSET_ID = 4;
  private static final int __U_ISSET_ID = 5;
  private static final int __V_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(INDEX, new FieldMetaData("index", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(A, new FieldMetaData("a", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(B, new FieldMetaData("b", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(C, new FieldMetaData("c", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(D, new FieldMetaData("d", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(U, new FieldMetaData("u", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(V, new FieldMetaData("v", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(AXON, new FieldMetaData("axon", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.LIST)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(IzhNeuron.class, metaDataMap);
  }

  public IzhNeuron() {
    this.c = -65;

    this.v = -65;

  }

  public IzhNeuron(
    int index,
    double a,
    double b,
    double c,
    double d,
    double u,
    double v,
    List<Synapse> axon)
  {
    this();
    this.index = index;
    setIndexIsSet(true);
    this.a = a;
    setAIsSet(true);
    this.b = b;
    setBIsSet(true);
    this.c = c;
    setCIsSet(true);
    this.d = d;
    setDIsSet(true);
    this.u = u;
    setUIsSet(true);
    this.v = v;
    setVIsSet(true);
    this.axon = axon;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IzhNeuron(IzhNeuron other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.index = other.index;
    this.a = other.a;
    this.b = other.b;
    this.c = other.c;
    this.d = other.d;
    this.u = other.u;
    this.v = other.v;
    if (other.isSetAxon()) {
      this.axon = other.axon;
    }
  }

  @Override
  public IzhNeuron clone() {
    return new IzhNeuron(this);
  }

  public int getIndex() {
    return this.index;
  }

  public IzhNeuron setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bit_vector.clear(__INDEX_ISSET_ID);
  }

  // Returns true if field index is set (has been asigned a value) and false otherwise
  public boolean isSetIndex() {
    return __isset_bit_vector.get(__INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bit_vector.set(__INDEX_ISSET_ID, value);
  }

  public double getA() {
    return this.a;
  }

  public IzhNeuron setA(double a) {
    this.a = a;
    setAIsSet(true);
    return this;
  }

  public void unsetA() {
    __isset_bit_vector.clear(__A_ISSET_ID);
  }

  // Returns true if field a is set (has been asigned a value) and false otherwise
  public boolean isSetA() {
    return __isset_bit_vector.get(__A_ISSET_ID);
  }

  public void setAIsSet(boolean value) {
    __isset_bit_vector.set(__A_ISSET_ID, value);
  }

  public double getB() {
    return this.b;
  }

  public IzhNeuron setB(double b) {
    this.b = b;
    setBIsSet(true);
    return this;
  }

  public void unsetB() {
    __isset_bit_vector.clear(__B_ISSET_ID);
  }

  // Returns true if field b is set (has been asigned a value) and false otherwise
  public boolean isSetB() {
    return __isset_bit_vector.get(__B_ISSET_ID);
  }

  public void setBIsSet(boolean value) {
    __isset_bit_vector.set(__B_ISSET_ID, value);
  }

  public double getC() {
    return this.c;
  }

  public IzhNeuron setC(double c) {
    this.c = c;
    setCIsSet(true);
    return this;
  }

  public void unsetC() {
    __isset_bit_vector.clear(__C_ISSET_ID);
  }

  // Returns true if field c is set (has been asigned a value) and false otherwise
  public boolean isSetC() {
    return __isset_bit_vector.get(__C_ISSET_ID);
  }

  public void setCIsSet(boolean value) {
    __isset_bit_vector.set(__C_ISSET_ID, value);
  }

  public double getD() {
    return this.d;
  }

  public IzhNeuron setD(double d) {
    this.d = d;
    setDIsSet(true);
    return this;
  }

  public void unsetD() {
    __isset_bit_vector.clear(__D_ISSET_ID);
  }

  // Returns true if field d is set (has been asigned a value) and false otherwise
  public boolean isSetD() {
    return __isset_bit_vector.get(__D_ISSET_ID);
  }

  public void setDIsSet(boolean value) {
    __isset_bit_vector.set(__D_ISSET_ID, value);
  }

  public double getU() {
    return this.u;
  }

  public IzhNeuron setU(double u) {
    this.u = u;
    setUIsSet(true);
    return this;
  }

  public void unsetU() {
    __isset_bit_vector.clear(__U_ISSET_ID);
  }

  // Returns true if field u is set (has been asigned a value) and false otherwise
  public boolean isSetU() {
    return __isset_bit_vector.get(__U_ISSET_ID);
  }

  public void setUIsSet(boolean value) {
    __isset_bit_vector.set(__U_ISSET_ID, value);
  }

  public double getV() {
    return this.v;
  }

  public IzhNeuron setV(double v) {
    this.v = v;
    setVIsSet(true);
    return this;
  }

  public void unsetV() {
    __isset_bit_vector.clear(__V_ISSET_ID);
  }

  // Returns true if field v is set (has been asigned a value) and false otherwise
  public boolean isSetV() {
    return __isset_bit_vector.get(__V_ISSET_ID);
  }

  public void setVIsSet(boolean value) {
    __isset_bit_vector.set(__V_ISSET_ID, value);
  }

  public List<Synapse> getAxon() {
    return this.axon;
  }

  public IzhNeuron setAxon(List<Synapse> axon) {
    this.axon = axon;
    return this;
  }

  public void unsetAxon() {
    this.axon = null;
  }

  // Returns true if field axon is set (has been asigned a value) and false otherwise
  public boolean isSetAxon() {
    return this.axon != null;
  }

  public void setAxonIsSet(boolean value) {
    if (!value) {
      this.axon = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Integer)value);
      }
      break;

    case A:
      if (value == null) {
        unsetA();
      } else {
        setA((Double)value);
      }
      break;

    case B:
      if (value == null) {
        unsetB();
      } else {
        setB((Double)value);
      }
      break;

    case C:
      if (value == null) {
        unsetC();
      } else {
        setC((Double)value);
      }
      break;

    case D:
      if (value == null) {
        unsetD();
      } else {
        setD((Double)value);
      }
      break;

    case U:
      if (value == null) {
        unsetU();
      } else {
        setU((Double)value);
      }
      break;

    case V:
      if (value == null) {
        unsetV();
      } else {
        setV((Double)value);
      }
      break;

    case AXON:
      if (value == null) {
        unsetAxon();
      } else {
        setAxon((List<Synapse>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case INDEX:
      return new Integer(getIndex());

    case A:
      return new Double(getA());

    case B:
      return new Double(getB());

    case C:
      return new Double(getC());

    case D:
      return new Double(getD());

    case U:
      return new Double(getU());

    case V:
      return new Double(getV());

    case AXON:
      return getAxon();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case INDEX:
      return isSetIndex();
    case A:
      return isSetA();
    case B:
      return isSetB();
    case C:
      return isSetC();
    case D:
      return isSetD();
    case U:
      return isSetU();
    case V:
      return isSetV();
    case AXON:
      return isSetAxon();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IzhNeuron)
      return this.equals((IzhNeuron)that);
    return false;
  }

  public boolean equals(IzhNeuron that) {
    if (that == null)
      return false;

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_a = true;
    boolean that_present_a = true;
    if (this_present_a || that_present_a) {
      if (!(this_present_a && that_present_a))
        return false;
      if (this.a != that.a)
        return false;
    }

    boolean this_present_b = true;
    boolean that_present_b = true;
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (this.b != that.b)
        return false;
    }

    boolean this_present_c = true;
    boolean that_present_c = true;
    if (this_present_c || that_present_c) {
      if (!(this_present_c && that_present_c))
        return false;
      if (this.c != that.c)
        return false;
    }

    boolean this_present_d = true;
    boolean that_present_d = true;
    if (this_present_d || that_present_d) {
      if (!(this_present_d && that_present_d))
        return false;
      if (this.d != that.d)
        return false;
    }

    boolean this_present_u = true;
    boolean that_present_u = true;
    if (this_present_u || that_present_u) {
      if (!(this_present_u && that_present_u))
        return false;
      if (this.u != that.u)
        return false;
    }

    boolean this_present_v = true;
    boolean that_present_v = true;
    if (this_present_v || that_present_v) {
      if (!(this_present_v && that_present_v))
        return false;
      if (this.v != that.v)
        return false;
    }

    boolean this_present_axon = true && this.isSetAxon();
    boolean that_present_axon = true && that.isSetAxon();
    if (this_present_axon || that_present_axon) {
      if (!(this_present_axon && that_present_axon))
        return false;
      if (!this.axon.equals(that.axon))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(IzhNeuron other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    IzhNeuron typedOther = (IzhNeuron)other;

    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(index, typedOther.index);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetA()).compareTo(isSetA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(a, typedOther.a);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetB()).compareTo(isSetB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(b, typedOther.b);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetC()).compareTo(isSetC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(c, typedOther.c);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetD()).compareTo(isSetD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(d, typedOther.d);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetU()).compareTo(isSetU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(u, typedOther.u);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetV()).compareTo(isSetV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(v, typedOther.v);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAxon()).compareTo(isSetAxon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(axon, typedOther.axon);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case INDEX:
          if (field.type == TType.I32) {
            this.index = iprot.readI32();
            setIndexIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case A:
          if (field.type == TType.DOUBLE) {
            this.a = iprot.readDouble();
            setAIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case B:
          if (field.type == TType.DOUBLE) {
            this.b = iprot.readDouble();
            setBIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case C:
          if (field.type == TType.DOUBLE) {
            this.c = iprot.readDouble();
            setCIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case D:
          if (field.type == TType.DOUBLE) {
            this.d = iprot.readDouble();
            setDIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case U:
          if (field.type == TType.DOUBLE) {
            this.u = iprot.readDouble();
            setUIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V:
          if (field.type == TType.DOUBLE) {
            this.v = iprot.readDouble();
            setVIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AXON:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.axon = new ArrayList<Synapse>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                Synapse _elem2;
                _elem2 = new Synapse();
                _elem2.read(iprot);
                this.axon.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(INDEX_FIELD_DESC);
    oprot.writeI32(this.index);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(A_FIELD_DESC);
    oprot.writeDouble(this.a);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(B_FIELD_DESC);
    oprot.writeDouble(this.b);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(C_FIELD_DESC);
    oprot.writeDouble(this.c);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(D_FIELD_DESC);
    oprot.writeDouble(this.d);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(U_FIELD_DESC);
    oprot.writeDouble(this.u);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(V_FIELD_DESC);
    oprot.writeDouble(this.v);
    oprot.writeFieldEnd();
    if (this.axon != null) {
      oprot.writeFieldBegin(AXON_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.axon.size()));
        for (Synapse _iter3 : this.axon)        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IzhNeuron(");
    boolean first = true;

    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a:");
    sb.append(this.a);
    first = false;
    if (!first) sb.append(", ");
    sb.append("b:");
    sb.append(this.b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("c:");
    sb.append(this.c);
    first = false;
    if (!first) sb.append(", ");
    sb.append("d:");
    sb.append(this.d);
    first = false;
    if (!first) sb.append(", ");
    sb.append("u:");
    sb.append(this.u);
    first = false;
    if (!first) sb.append(", ");
    sb.append("v:");
    sb.append(this.v);
    first = false;
    if (!first) sb.append(", ");
    sb.append("axon:");
    if (this.axon == null) {
      sb.append("null");
    } else {
      sb.append(this.axon);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

