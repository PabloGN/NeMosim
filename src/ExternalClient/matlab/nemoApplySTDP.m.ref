function nemoApplySTDP(reward)

	global NEMO_CM;
	global NEMO_STDP_ACC;
	global NEMO_STDP_MAX_WEIGHT;
	global NEMO_STDP_MIN_WEIGHT;
	global NEMO_RTS_STDP;
	global NEMO_RCM_D;
	global NEMO_RCM_N;
	global NEMO_CYCLE;
	global NEMO_MAX_DELAY;
	global NEMO_RTS_ENABLED;

	verbose = false;
	if(verbose)
		fid = fopen('stdp.dat','wt');
	end

	for post=1:length(NEMO_STDP_ACC)

		pres = NEMO_RCM_N{post};
		w_diffs = NEMO_STDP_ACC{post};
		ds = NEMO_RCM_D{post};

		% TODO: use logical indexing here instead
		changed = find(w_diffs);
		NEMO_STDP_ACC{post}(changed) = 0;

		% Now apply limiting to the weights
		for i=changed

			pre = pres(i);
			w_diff = w_diffs(i) * reward;
			d = ds(i);

			w_init = NEMO_CM{d}(post,pre);
			w_new = w_init + w_diff;

			if(w_init == 0 || sign(w_new) ~= sign(w_init))
				w_new = 0;
			elseif(w_new > NEMO_STDP_MAX_WEIGHT)
				w_new = NEMO_STDP_MAX_WEIGHT;
			elseif(w_new < NEMO_STDP_MIN_WEIGHT)
				w_new = NEMO_STDP_MIN_WEIGHT;
			end

			NEMO_CM{d}(post,pre) = w_new;

			if(verbose)
				fprintf(fid, 'c%u: stdp (%u->%u) %f %+f = %f\n',...
					NEMO_CYCLE, pre, post, w_init, w_diff, w_new);
			end
		end

		if NEMO_RTS_ENABLED
			NEMO_RTS_STDP = NEMO_RTS_STDP + length(changed);
		end
	end

	if(verbose)
		fclose(fid);
	end

end
