#ifndef CONNECTIVITY_MATRIX_CU_H
#define CONNECTIVITY_MATRIX_CU_H

//! \file connectivityMatrix.cu_h

#include <cuda_runtime.h>

#include "kernel.cu_h"

/* \brief Synapse encoding/decoding
 *
 * Forward synapse: target partition / target neuron
 * Reverse synapse: source synapse / source partition / source neuron
 */


// planes of forward connectivity matrix
#define FCM_ADDRESS 0        // target partition and neuron
#define FCM_WEIGHT 1         // float packed as int
#define FCM_SUBMATRICES 2

__host__ void setFcmPlaneSize(size_t sz);

__host__ uint f_packSynapse(uint partition, uint neuron);

__device__ uint targetNeuron(uint synapse);
__device__ uint targetPartition(uint synapse);

__host__ uint r_packSynapse(
		uint sourcePartition,
		uint sourceNeuron,
		uint sourceSynapse,
		uint delay);

#define INVALID_REVERSE_SYNAPSE ((uint) ~0)

__device__ __host__ uint sourceNeuron(uint rsynapse);
__device__ __host__ uint sourcePartition(uint rsynapse);
__device__ __host__ uint forwardIdx(uint rsynapse);
__device__ __host__ uint r_delay1(uint rsynapse);

__host__
void
configureReverseAddressing(
        const std::vector<DEVICE_UINT_PTR_T>& r0_pitch,
        const std::vector<DEVICE_UINT_PTR_T>& r0_address,
        const std::vector<DEVICE_UINT_PTR_T>& r0_stdp,
        const std::vector<DEVICE_UINT_PTR_T>& r0_faddress,
        const std::vector<DEVICE_UINT_PTR_T>& r1_pitch,
        const std::vector<DEVICE_UINT_PTR_T>& r1_address,
        const std::vector<DEVICE_UINT_PTR_T>& r1_stdp,
        const std::vector<DEVICE_UINT_PTR_T>& r1_faddress);

#endif
