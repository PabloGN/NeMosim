################################################################################
#
# Copyright 1993-2006 NVIDIA Corporation.  All rights reserved.
#
# NOTICE TO USER:   
#
# This source code is subject to NVIDIA ownership rights under U.S. and 
# international Copyright laws.  
#
# NVIDIA MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS SOURCE 
# CODE FOR ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR 
# IMPLIED WARRANTY OF ANY KIND.  NVIDIA DISCLAIMS ALL WARRANTIES WITH 
# REGARD TO THIS SOURCE CODE, INCLUDING ALL IMPLIED WARRANTIES OF 
# MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.   
# IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL, 
# OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS 
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
# OR PERFORMANCE OF THIS SOURCE CODE.  
#
# U.S. Government End Users.  This source code is a "commercial item" as 
# that term is defined at 48 C.F.R. 2.101 (OCT 1995), consisting  of 
# "commercial computer software" and "commercial computer software 
# documentation" as such terms are used in 48 C.F.R. 12.212 (SEPT 1995) 
# and is provided to the U.S. Government only as a commercial end item.  
# Consistent with 48 C.F.R.12.212 and 48 C.F.R. 227.7202-1 through 
# 227.7202-4 (JUNE 1995), all U.S. Government End Users acquire the 
# source code with only those rights set forth herein.
#
################################################################################
#
# Build script for project
#
################################################################################

CUDA_SDK_PATH := /opt/NVIDIA_CUDA_SDK

# Add source files here
# CUDA source files (compiled with cudacc)
CUFILES		:= izhikevich_kernel.cu
CCFILES		:= firing_handlers.cpp termcolour.cpp Cluster.cpp DeviceMemory.cpp Simulation.cpp

STATIC_LIB := libizhikevich.a

#EXECUTABLE  := ring
#CCFILES     := ring.cpp firing_handlers.cpp termcolour.cpp Cluster.cpp DeviceMemory.cpp Simulation.cpp
#EXECUTABLE  := smallworld
#CCFILES     := smallworld.cpp firing_handlers.cpp termcolour.cpp Cluster.cpp DeviceMemory.cpp Simulation.cpp

EXTINCLUDES := -I/usr/include -I$(CUDA_SDK_PATH)/common/inc
EXTLIBS := -L/usr/lib -lgsl -lgslcblas -lboost_program_options



################################################################################
# Rules and targets

default: all

verbose = 1
include common.mk


################################################################################
# TODO: deal with emulation etc here

ifeq ($(emu), 1)
	BINSUBDIR   := emu$(BINSUBDIR)
	# consistency, makes developing easier
	CXXFLAGS		+= -D__DEVICE_EMULATION__
	CFLAGS			+= -D__DEVICE_EMULATION__
endif
BINTARGETDIR := $(BINDIR)/$(BINSUBDIR)


# create binary in binary dir via object files in obj dir
$(BINTARGETDIR)/%: $(OBJDIR)/%.cpp_o $(TARGET) 
	$(VERBOSE)mkdir -p $(BINTARGETDIR)
	g++ -o $@ $(CXXFLAGS) $(INCLUDES) $< $(LIB) -L$(LIBDIR) -lizhikevich$(LIBSUFFIX)


.PHONY: smallworld
smallworld: $(BINTARGETDIR)/smallworld

.PHONY: ring
ring: $(BINTARGETDIR)/ring

.PHONY: random1k
random1k: $(BINTARGETDIR)/random1k

BINARIES := smallworld ring random1k

.PHONY: bin
bin: $(addprefix $(BINTARGETDIR)/,$(BINARIES))


.PHONY: all
all: bin



################################################################################
# Testing
################################################################################

TEST_DIR := test
ABS_BIN_DIR := $(CURDIR)/$(BINDIR)/release


# Create a new set of regression tests
.PHONY: regression
regression: PATH := $(ABS_BIN_DIR):$(PATH)
regression: bin
	@(cd test; for i in $(BINARIES); do ./regression-create-$$i; done; cd ..)
	

# Run all regression tests
.PHONY: test
test: PATH := $(ABS_BIN_DIR):$(PATH)
test: $(addprefix $(BINTARGETDIR)/,$(BINARIES))
	@(cd test; ./regression-run; cd ..)


################################################################################
# Profiling
################################################################################

PROFILE_DIR := profile

.PHONY: memprofile
memprofile: PATH := $(ABS_BIN_DIR):$(PATH)
memprofile: CUDA_PROFILE=1
memprofile: CUDA_PROFILE_CONFIG=profile.config 
memprofile: profile.config
	# TODO: complete
	#@(cd profile; random1k 



################################################################################
# Cleaning
################################################################################

.PHONY: clean
clean: libclean binclean
	-$(VERBOSE)find $(ROOTOBJDIR) -iname '*.o' -o -iname '*.cpp_o' -delete


# Remove binaries for all configurations (emulation, debug)
.PHONY: binclean
binclean:
	-find $(ROOTBINDIR) $(foreach file,$(BINARIES),-iname $(file) -o) -false -delete
