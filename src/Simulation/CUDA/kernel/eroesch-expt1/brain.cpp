//! \file brain.cpp/*! Network connected from DTI data * * \author Etienne Roesch */#include "Cluster.hpp"//#include "izhikevich.h"//#include "Simulation.hpp"#include <boost/program_options.hpp>#include <cv.h>#include <highgui.h>#include <iostream>#include <stdio.h>#include <time.h>int g_spikingIndex;intprocessCmdLine(int argc, char** argv){	namespace po = boost::program_options;	try {		/*po::options_description desc("Generic options");		desc.add_options()			("help", "produce help message")			("verbose", "print simulation information")			("cycles", po::value<int>(simCycles)->default_value(1000), 			 		"number of simulation cycles")			("size", po::value<int>(size)->default_value(1024),			 		"number of neurons")			("step", po::value<int>(step)->default_value(1),			 		"step size (in neuron indices) between presynaptic and postsynaptic neurons in ring")			("output-colour", "print firing pattern to terminal (colour)")			("output-file", po::value<std::string>(), "write firing pattern to file")			("spike-index", po::value<int>(&g_spikingIndex)->default_value(0),			 		"neuron which should spike")			("verify", po::value<std::string>(), "verify firing pattern against file");					po::variables_map vm;		po::store( po::command_line_parser(argc, argv).options(desc).run(), vm );		po::notify(vm);		if(vm.count("help")) {			std::cout << desc << "\n";			return 1;		}		// Firing output.		// Take care to only create file once		if(vm.count("output-file")) {			*firingHandler = printFiringRaw;			*firingFile = fopen(vm["output-file"].as<std::string>().c_str(), "w");		} else if(vm.count("output-colour")) {			*firingHandler = printFiringTermColour;			*firingFile = stdout;		} else if(vm.count("verify")) {			*firingHandler = verifyFiring;			*firingFile = fopen(vm["verify"].as<std::string>().c_str(), "r");		} 		if(vm.count("verbose")) {			*reportFlags = REPORT_TIMING | REPORT_FIRING | REPORT_MEMORY;		} else {			*reportFlags = 0;		}*/	}	catch(std::exception& e) {		std::cerr << "error: " << e.what() << "\n";		return 1;	}	catch(...) {		std::cerr << "Exception of unknown type!\n";		return 1;	}	return 0;}intmain(int argc, char** argv){	Cluster brain(996);  // 83x12 neurons	IplImage* connectFile;	int cmdLineError = processCmdLine(argc, argv);	if(cmdLineError)		return cmdLineError;	srand(time(NULL)); 	// Init excitatory neurons, Izhikevich (2003)	for(int pre=0; pre<747; ++pre) {		float r = rand()%100/100;		brain.setA(pre, 0.02f);		brain.setB(pre, 0.2f);		brain.setC(pre, -65.0f + 15.0f *r*r);		brain.setD(pre, 8.0f - 6.0f *r*r);		brain.setV(pre, -65.0f);		brain.setU(pre, 0.2*-65.0f);	}	// Init inhibitory neurons, Izhikevich (2003)	// 996-747 = 249 neurons	for(int pre=747; pre<brain.n; ++pre) {		float r = rand()%100/100;		brain.setA(pre, 0.02f + 0.08f * r);		brain.setB(pre, 0.25 - 0.05f * r);		brain.setC(pre, -65.0f);		brain.setD(pre, 2);		brain.setV(pre, -65.0f);		brain.setU(pre, 0.2*-65.0f);	}	/*	float temp = -23.f;	connectFile = fopen("/homes/eroesch/Documents/_ToBeSynced/GWModel/mynewmatrix.txt", "r");    //fscanf(connectFile, "%d", &(polyg2->n) );    for(int li = 0; li < 1; li++ ){        fscanf( connectFile, "%f", &temp );    }	fclose( connectFile );	printf("--> %f\n", temp);	*/	if( (connectFile = cvLoadImage("/homes/eroesch/Documents/_ToBeSynced/GWModel/mynewmatrix.pbm", 1)) != 0) {		printf("I am in.");		cvNamedWindow( "Image view", 1 );        cvShowImage( "Image view", connectFile );        cvWaitKey(0); // very important, contains event processing loop inside        cvDestroyWindow( "Image view" );        cvReleaseImage( &connectFile );        //return 0;	}	else		printf("Couldn't load the picture.");}