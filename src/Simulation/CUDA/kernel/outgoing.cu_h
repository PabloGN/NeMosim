#ifndef TARGET_PARTITIONS_CU_H
#define TARGET_PARTITIONS_CU_H

/* For L1 spike delivery we need to know to which target partitions each firing
 * neuron has outgoing synapses. We store this information in a matrix indexed
 * by partition, neuron, and delay. Each entry is a row listing partition
 * targets. Empty entries are set to -1. */

#include <cuda_runtime.h>

#include "nemo_cuda_types.h"


/* Each outgoing spike group specifies
 *
 * 1. target partition
 * 2. delay
 * 3. warp index
 */
//! \todo could simplify this, by only storing an offset, which should always fit into 32b
#ifdef __DEVICE_EMULATION__
typedef uint4 outgoing_t; // so we can store 64-bit addresses
#else
typedef uint2 outgoing_t;
#endif

__host__ outgoing_t make_outgoing(pidx_t partition, delay_t delay, uint warp, void* d_ptr);

#ifdef __DEVICE_EMULATION__
const outgoing_t INVALID_OUTGOING = make_uint4(0, 0, 0, 0);
#else
const outgoing_t INVALID_OUTGOING = make_uint2(0, 0);
#endif


__host__ void setOutgoingPitch(size_t targetPitch);


/* Return address at beginning of given row */
__host__ __device__ 
size_t
outgoingRow(pidx_t partition, nidx_t neuron, size_t pitch);


#endif
