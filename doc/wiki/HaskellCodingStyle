====================
Haskell coding style
====================

Line width and indentation
--------------------------

Limit to 80 characters where possible. Use spaces, rather than tabs, with a
tabstop of 4 characters. 

Type signatures
---------------

Indent arrows on second and subsequent lines by four spaces. Use one of three
styles:

1. All on one line, if it can fit::
   foobar :: (Show a) => a -> b -> c

2. Type constraints on one line, all types on second line::
   foobar 
       :: (Show a)
       => a -> b -> c

3. One entry per line. Use this style if documenting the function parameters::
   foobar :: (Show a)
       => a      -- ^ this parameter does something
       -> b      -- ^ this parameter does something else
       -> c

Data definitions
----------------

For very simple type onely, put everything on one line::
	data Foo a = Bar | Baz a

For more complex types, put one entry per line, indented eight spaces. The
equals sign goes on the second line for simpler allignment. Any deriving
statement is indented four spaces only. Indent documentation manually::
	data Foo a 
			= Bar         -- ^ bla, bla
			| Baz a       -- ^ bla, bla, bla
			| Quux a a
		deriving (Show, Ord)

For record types the same visual appearance is used, but now the '=' goes on the
first line::
	data Foo a b = {
			first :: a,
			second :: [b]
		} deriving (Eq, Ord)

Do-notation
-----------

Put the 'do' at the end of the previous line. This saves some horizontal space,
and is consistent with the way it's often used when 'do'-s are nested.

Where clauses
-------------

Put 'where' on a separate line, indented at least four spaces from the left
margin. Indent subsequent lines by an additional four spaces. If 'where' is used
in do notation, align 'where' with the previous line.::
	
	foo = do
		bar <- baz
		where
			baz2 = ..

	foo = bar baz
		where	
			baz = ..

Error reporting
---------------

Using a generic monad is preferable, so that the caller can use e.g. Maybe or
Either::
	
	foo :: (Monad m) -> a -> m b
	foo x
		| x < 0 = fail "error msg"
		| otherwise = bar x
