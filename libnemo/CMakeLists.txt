CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT(nemo)

SET(CPACK_PACKAGE_NAME nemo)
SET(CPACK_PACKAGE_VERSION_MAJOR 0)
SET(CPACK_PACKAGE_VERSION_MINOR 6)
SET(CPACK_PACKAGE_VERSION_PATCH 3)
SET(CPACK_PACKAGE_CONTACT "Andreas Fidjeland <andreas.fidjeland@imperial.ac.uk>")

SET(NEMO_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")

OPTION(NEMO_CUDA_ENABLED "Enabled simulation on CUDA devices" ON)

IF(NEMO_CUDA_ENABLED)
	OPTION(NEMO_CUDA_DYNAMIC_LOADING "Load the CUDA backend dynamically" ON)
	OPTION(NEMO_CUDA_KERNEL_TIMING "Count and report cycles spent by the device in different kernel stages" OFF)
	SET(NEMO_CUDA_DEBUG_TRACE "" CACHE STRING "Mask indicating what events to show in trace log. Or the following: 0x2 (neuron), 0x4 (synapse) 0x8 (stdp)")
	OPTION(NEMO_CUDA_DEVICE_ASSERTIONS "Enable assertions in device code" OFF)
ENDIF(NEMO_CUDA_ENABLED)

OPTION(NEMO_MATLAB_ENABLED "Create Matlab API bindings" ON)
OPTION(NEMO_PYTHON_ENABLED "Create Python API bindings" ON)

OPTION(
	NEMO_TIMING_ENABLED
	"Include API functions for timing (requires boost_date_time library)"
	ON
)

IF(NEMO_TIMING_ENABLED)
	LIST(APPEND BOOST_COMPONENTS date_time)
ENDIF(NEMO_TIMING_ENABLED)


OPTION(NEMO_MPI_ENABLED "Create MPI-enabled simulation" OFF)
IF(NEMO_MPI_ENABLED)
	LIST(APPEND BOOST_COMPONENTS mpi serialization)
	LIST(APPEND DIRS "mpi")
	OPTION(NEMO_MPI_DEBUG_TRACE "Enable debug trace for MPI backend" OFF)
	OPTION(NEMO_MPI_DEBUG_TIMING "Add detailed timing of MPI operations" OFF)
ENDIF(NEMO_MPI_ENABLED)


OPTION(NEMO_CPU_DEBUG_TRACE "Add debugging trace in the CPU backend" OFF)


OPTION(NEMO_EXAMPLES_ENABLED "Build binaries for example networks" ON)
IF(NEMO_EXAMPLES_ENABLED)
	LIST(APPEND DIRS examples)
ENDIF(NEMO_EXAMPLES_ENABLED)


OPTION(NEMO_TESTS_ENABLED "Build testsuite" OFF)
IF(NEMO_TESTS_ENABLED)
	LIST(APPEND DIRS test)
ENDIF(NEMO_TESTS_ENABLED)


SET(Boost_USE_MULTITHREADED OFF)
SET(Boost_USE_MULTITHREAD ${Boost_USE_MULTITHREADED}) # for older versions of FindBoost
IF(WIN32)
	SET(Boost_USE_STATIC_LIBS ON)
ELSE(WIN32)
	SET(Boost_USE_STATIC_LIBS OFF)
ENDIF(WIN32)

FIND_PACKAGE(Boost REQUIRED COMPONENTS ${BOOST_COMPONENTS})


# On windows just put everyting in one directory
IF(WIN32)
	SET(INSTALL_INCLUDE_DIR .)
	SET(INSTALL_LIB_DIR .)
ELSE(WIN32)
	SET(INSTALL_INCLUDE_DIR include)
	SET(INSTALL_LIB_DIR lib)
ENDIF(WIN32)

IF(CMAKE_COMPILER_IS_GNUCC)
	SET(CMAKE_CXX_FLAGS "-Wall" ${CMAKE_CXX_FLAGS})
ENDIF(CMAKE_COMPILER_IS_GNUCC)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake" ${CMAKE_MODULE_PATH})
INCLUDE(LinkStaticMSVCR)

SUBDIRS(nemo doc api ${DIRS})

INSTALL(FILES nemo.h nemo.hpp DESTINATION ${INSTALL_INCLUDE_DIR})


IF(WIN32)
	SET(CPACK_GENERATOR "ZIP" "NSIS")
	SET(CPACK_NSIS_MODIFY_PATH ON)
ENDIF(WIN32)
SET(CPACK_SOURCE_GENERATOR "TGZ" "ZIP")

SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${NEMO_VERSION}")
SET(CPACK_SOURCE_IGNORE_FILES
	"\\\\.gitignore"
	".*swp$"
	"build"
	mpi
	api/autogen
	api/matlab/sources
	"tmp.*"
	${CPACK_SOURCE_IGNORE_FILES})
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/COPYING")

# TODO: get architecture from uname
# TODO: only build this if we're actually on a debian platform
# TODO: make sure we build for appropriate version
#SET(CPACK_GENERATOR "DEB")
#SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${NEMO_VERSION}-${CMAKE_HOST_SYSTEM}")
#SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${NEMO_VERSION}-${CPACK_SYSTEM_NAME}")
# Debian packaging
# TODO: add dependencies (on other debian packages: boost)
#SET(CPACK_DEBIAN_PACKAGE_SECTION Science)

INCLUDE(CPack)


# Add uninstall target
CONFIGURE_FILE(
	"${CMAKE_CURRENT_SOURCE_DIR}/CMake/cmake_uninstall.cmake.in"
	"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
	IMMEDIATE @ONLY
)

ADD_CUSTOM_TARGET(uninstall "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
