CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(nemo)

SET(CPACK_PACKAGE_NAME nemo)
SET(CPACK_PACKAGE_VERSION_MAJOR 0)
SET(CPACK_PACKAGE_VERSION_MINOR 5)
SET(CPACK_PACKAGE_VERSION_PATCH 7-rc0)
SET(CPACK_PACKAGE_CONTACT "Andreas Fidjeland <andreas.fidjeland@imperial.ac.uk>")

OPTION(NEMO_CUDA_ENABLED "Enabled simulation on CUDA devices" ON)

IF(NEMO_CUDA_ENABLED)
	IF(WIN32)
		# TODO: add dynamic loading using Windows primitives
		SET(NEMO_CUDA_DYNAMIC_LOADING OFF)
	ELSE(WIN32)
		OPTION(NEMO_CUDA_DYNAMIC_LOADING "Load the CUDA backend dynamically" ON)
	ENDIF(WIN32)

	OPTION(NEMO_CUDA_KERNEL_TIMING "Count and report cycles spent by the device in different kernel stages" OFF)
ENDIF(NEMO_CUDA_ENABLED)

OPTION(NEMO_MATLAB_ENABLED "Create the Matlab API" ON)
IF(NEMO_MATLAB_ENABLED)
	LIST(APPEND DIRS api)
ENDIF(NEMO_MATLAB_ENABLED)


OPTION(
	NEMO_TIMING_ENABLED
	"Include API functions for timing (requires boost_date_time library)"
	ON
)

IF(NEMO_TIMING_ENABLED)
	LIST(APPEND BOOST_COMPONENTS date_time)
ENDIF(NEMO_TIMING_ENABLED)


OPTION(INCLUDE_MPI "Create MPI-enabled simulation" OFF)
IF(INCLUDE_MPI)
	LIST(APPEND BOOST_COMPONENTS mpi serialization)
	LIST(APPEND DIRS "mpi")

	OPTION(INCLUDE_MPI_LOGGING "Enable logging (for debugging) in MPI applications" OFF)
ENDIF(INCLUDE_MPI)


OPTION(NEMO_CPU_DEBUG_TRACE "Add debugging trace in the CPU backend" OFF)


OPTION(NEMO_EXAMPLES_ENABLED "Build binaries for example networks" ON)
IF(NEMO_EXAMPLES_ENABLED)
	LIST(APPEND DIRS examples)
ENDIF(NEMO_EXAMPLES_ENABLED)


OPTION(NEMO_TESTS_ENABLED "Build testsuite" OFF)
IF(NEMO_TESTS_ENABLED)
	LIST(APPEND DIRS test)
ENDIF(NEMO_TESTS_ENABLED)


OPTION(NEMO_VERBOSE "Produce verbose simulation output (mainly useful for testing)" OFF)

SET(Boost_USE_MULTITHREAD OFF)
IF(WIN32)
	SET(Boost_USE_STATIC_LIBS ON)
ELSE(WIN32)
	SET(Boost_USE_STATIC_LIBS OFF)
ENDIF(WIN32)
FIND_PACKAGE(Boost REQUIRED COMPONENTS ${BOOST_COMPONENTS})


# On windows just put everyting in one directory
IF(WIN32)
	SET(INSTALL_INCLUDE_DIR .)
	SET(INSTALL_LIB_DIR .)
ELSE(WIN32)
	SET(INSTALL_INCLUDE_DIR include/nemo)
	SET(INSTALL_LIB_DIR lib)
ENDIF(WIN32)

IF(CMAKE_COMPILER_IS_GNUCC)
	SET(CMAKE_CXX_FLAGS "-Wall" ${CMAKE_CXX_FLAGS})
ENDIF(CMAKE_COMPILER_IS_GNUCC)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake" ${CMAKE_MODULE_PATH})
INCLUDE(LinkStaticMSVCR)

SUBDIRS(nemo doc ${DIRS})

INSTALL(FILES nemo.h nemo.hpp DESTINATION ${INSTALL_INCLUDE_DIR})


SET(CPACK_SOURCE_GENERATOR "TGZ" "ZIP")

SET(VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${VERSION}")
SET(CPACK_SOURCE_IGNORE_FILES
	"\\\\.gitignore"
	".*swp$"
	"build"
	mpi
	api/autogen
	api/matlab/sources
	"tmp.*"
	${CPACK_SOURCE_IGNORE_FILES})
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/COPYING")

# TODO: get architecture from uname
# TODO: only build this if we're actually on a debian platform
# TODO: make sure we build for appropriate version
#SET(CPACK_GENERATOR "DEB")
#SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${VERSION}-${CMAKE_HOST_SYSTEM}")
#SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${VERSION}-${CPACK_SYSTEM_NAME}")
# Debian packaging
# TODO: add dependencies (on other debian packages: boost)
#SET(CPACK_DEBIAN_PACKAGE_SECTION Science)

INCLUDE(CPack)
