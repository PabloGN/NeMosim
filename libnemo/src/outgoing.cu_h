#ifndef TARGET_PARTITIONS_CU_H
#define TARGET_PARTITIONS_CU_H

/* Copyright 2010 Imperial College London
 *
 * This file is part of nemo.
 *
 * This software is licenced for non-commercial academic use under the GNU
 * General Public Licence (GPL). You should have received a copy of this
 * licence along with nemo. If not, see <http://www.gnu.org/licenses/>.
 */

/* For L1 spike delivery we need to know to which target partitions each firing
 * neuron has outgoing synapses. We store this information in a matrix indexed
 * by partition, neuron, and delay. Each entry is a row listing partition
 * targets. Empty entries are set to -1. */

#include <cuda_runtime.h>

#include "cuda_types.h"


/* Each outgoing spike group specifies
 *
 * 1. target partition
 * 2. delay
 * 3. address of the full synapse group
 * 4. bit-vector for target warps within target partitions
 *
 * We keep a 32-bit group address. This is enough for 4B warps. With a group-size
 * of 32, this is 32x as much memory as current devices can address.
 */
typedef uint2 outgoing_t;


/*!
 * \param warpOffset
 *		offset into FCM in terms of number of warps
 */
__host__ outgoing_t make_outgoing(pidx_t partition, delay_t delay, unsigned warpOffset);

const outgoing_t INVALID_OUTGOING = make_uint2(0, 0);


__host__ void setOutgoingPitch(size_t targetPitch);


/* Return address at beginning of given row */
__host__ __device__ 
size_t
outgoingRow(pidx_t partition, nidx_t neuron, size_t pitch);


#endif
